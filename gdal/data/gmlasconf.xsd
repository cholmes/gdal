<?xml version="1.0" encoding="UTF-8"?>
<!--
/******************************************************************************
 * $Id$
 *
 * Project:  GDAL/OGR
 * Purpose:  XML Schema for gmlasconf.xml
 * Author:   Even Rouault, <even dot rouault at spatialys dot com>
 *
 **********************************************************************
 * Copyright (c) 2016, Even Rouault
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 ****************************************************************************/
-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified" version="1.0">
  <xs:element name="Configuration">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="AllowRemoteSchemaDownload" minOccurs="0"
                    type="xs:boolean">
          <xs:annotation>
            <xs:documentation>
                Whether downloading remote schemas is allowed. Default is true.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="SchemaCache" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
                Describe working of schema cache.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Directory" minOccurs="0" type="xs:string">
                <xs:annotation>
                  <xs:documentation>
                    Name of the cache directory. If not specified, this
                    defaults to $HOME/.gdal/gmlas_xsd_cache.
                    Ignored if 'enabled' is not true.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="enabled" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                        Whether the cache is enabled. Default is true.
                    </xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="Validation" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
                Describe if and how validation of the document against the
                schema is done.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="FailIfError" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>
                    Whether a validation error should prevent dataset
                    opening.
                    Ignored if 'enabled' is not true.
                    Default is false.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:sequence>
            <xs:attribute name="enabled" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>
                  Whether validation is enabled. Default is false.
                </xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
        <xs:element name="ExposeMetadataLayers" minOccurs="0" type="xs:boolean">
          <xs:annotation>
            <xs:documentation>
                Whether the _ogr_layers_metadata, _ogr_fields_metadata and
                _ogr_layer_relationships layers that show how OGR layers and
                fields are built from the schemas should be exposed as
                available layers.
                Default is false.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="LayerBuildingRules" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
                Tunable rules that affect how layers and fields are built from
                the schema.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="UseArrays" minOccurs="0" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>
                    Whether OGR array types (StringList, IntegerList,
                    Integer64List and RealList) can be used to store
                    repeated values of the corresponding base types.
                    Default is true.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="GML" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>
                    Settings specific to documents that import the GML namespace.
                  </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="IncludeGeometryXML" minOccurs="0"
                                type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>
                          Whether the XML description of a GML geometry should
                          be stored in a string attribute (whose name is the
                          element name suffixed by _xml). This is in addition
                          to storing the geometry as a OGR geometry.
                          Default is true.
                         </xs:documentation>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="InstantiateGMLFeaturesOnly" minOccurs="0"
                                type="xs:boolean">
                      <xs:annotation>
                        <xs:documentation>
                          Whether, when dealing with schemas that import the
                          GML namespace, and that at least one of them has
                          elements that derive from gml:_Feature or
                          gml:AbstractFeatureonly, only such elements should be
                          instantiated as OGR layers, during the first pass that
                          iterates over top level elements of the imported
                          schemas.
                          Note: for technical reasons, other elements may end
                          up being exposed as OGR layers, but this setting
                          is a first way of limiting the number of OGR layers.
                          Default is true.
                         </xs:documentation>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="IgnoredXPaths" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
                Define elements and attributes that will be ignored when
                building OGR layer and field definitions.
            </xs:documentation>
          </xs:annotation>
          <xs:complexType>
            <xs:sequence>
              <xs:element name="WarnIfIgnoredXPathFoundInDocInstance"
                          minOccurs="0" type="xs:boolean">
                <xs:annotation>
                  <xs:documentation>
                    Emit a warning each time an element or attribute is
                    found in the document parsed, but ignored because
                    of the ignored XPath defined.
                    Default is true.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="Namespaces" minOccurs="0">
                <xs:annotation>
                  <xs:documentation>
                    Define optional namespaces prefix/uri tuples with
                    which to interpret the XPath elements defined
                    afterwards.
                    This allows the user to define different rules when
                    different namespaces in different XML instances map
                    to the same prefix. E.g documents referencing
                    different GML versions may use "gml" as
                    a prefix for "http://www.opengis.net/gml" or
                    "http://www.opengis.net/gml/3.2", but it might be
                    desirable to have different exclusion rules.
                    When comparing the XPath exclusion rules and the
                    XPath of the elements/attributes of the parsed
                    documents, and when the namespace of the XPath
                    exclusion rule has been difined, the URI will be
                    used as the unambiguous key. Otherwise prefix
                    matching will be used.
                  </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Namespace" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>
                          Define a namespaces prefix/uri tuple with
                          which to interpret the XPath elements
                          defined afterwards.
                        </xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:sequence/>
                        <xs:attribute name="prefix" type="xs:string" use="required">
                          <xs:annotation>
                            <xs:documentation>Namespace prefix.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                        <xs:attribute name="uri" type="xs:string" use="required">
                          <xs:annotation>
                            <xs:documentation>Namespace URI.</xs:documentation>
                          </xs:annotation>
                        </xs:attribute>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="XPath" minOccurs="0" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation>
                    A XPath against which elements and attributes found
                    during schema analysis will be compared. If the
                    XPath of the element/attribute of the schema
                    matches this XPath, it will be ignored.
                    Only a restricted subset of the full XPath 1.0
                    syntax is supported, namely the abbreviated syntax
                    with the '//' and '@' axis specifiers.
                    Valid XPath are for example:
                    - [ns1:]foo/[ns2:]bar: matches a bar element as a
                        direct child of a foo element, foo being at any
                        nesting level in the compared XPath.
                    - [ns1:foo]/@[ns2:]baz: matches a baz attribute of a
                        foo element, foo being at any nesting level in
                        the compared XPath
                    - [ns1:]foo//[ns2:]bar: matches a bar element as a
                        direct or indirect child of a foo element,
                        foo being at any nesting level in the compared
                        XPath.
                    - /[ns1:]foo/[ns2:]bar: matches a bar element as a
                        direct child of a foo element, foo being at the
                        root level.
                  </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:simpleContent>
                    <xs:extension base="xs:string">
                      <xs:attribute name="warnIfIgnoredXPathFoundInDocInstance"
                                    type="xs:boolean">
                        <xs:annotation>
                          <xs:documentation>
                            Emit a warning each time an element or attribute is
                            found in the document parsed, but ignored because
                            of the ignored XPath defined.
                            Override the global setting of the
                            WarnIfIgnoredXPathFoundInDocInstance element
                            Default is true.
                          </xs:documentation>
                        </xs:annotation>
                      </xs:attribute>
                    </xs:extension>
                  </xs:simpleContent>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
</xs:schema>
